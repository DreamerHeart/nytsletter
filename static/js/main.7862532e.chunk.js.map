{"version":3,"sources":["components/NewsItem.tsx","hooks/useObserveSingleIntersection.ts","components/LoadingSpinner.tsx","components/NewsFeed.tsx","components/NewsSecionPicker.tsx","App.tsx","hooks/useVerticalScrollListener.ts","serviceWorker.ts","index.tsx"],"names":["NewsItem","ref","this","props","aRef","className","href","url","src","thumbnailStandard","alt","publishedDate","toLocaleString","title","React","Component","useSingleIntersectionObserver","options","root","rootMargin","threshold","callback","elementRef","useRef","intersectionObserverCallbackRef","observer","isIntersecting","current","unobserve","observerRef","IntersectionObserver","setObservedElement","newElement","observe","useEffect","currentObserver","disconnect","LoadingSpinner","NewsFeed","apiEndpointUrl","apiKey","source","section","topMargin","useState","news","setNews","batchOffset","isLoading","setIsLoading","isLoadingRef","undefined","loadBatch","setObservedElementRef","onRefChange","useCallback","node","axios","get","then","data","results","rawNewsItems","catch","err","isAxiosError","console","log","setTimeout","finally","clsx","map","item","index","length","thumbnail_standard","Date","published_date","uuidv4","NewsSecionPicker","mode","sections","setSelectedSection","s","onClick","display_name","onChange","evt","target","value","API_ENDPOINT_URL","process","API_KEY","App","newsSectionPickerMode","setNewsSectionPickerMode","document","crossedDownCallback","crossedUpCallback","lastKnownScrollPosition","ticking","listener","e","crossedDown","crossedUp","window","scrollY","requestAnimationFrame","addEventListener","removeEventListener","useVerticalScrollListener","n","setSections","selectedSection","encodeURIComponent","Array","from","filter","showUnder","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7862532e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/NewsItem.scss\";\n\ninterface NewsItemProps {\n  aRef: ((node?: Element | null | undefined) => void) | undefined;\n  title: string;\n  url: string;\n  thumbnailStandard: string;\n  publishedDate: Date;\n}\n\nclass NewsItem extends React.Component<NewsItemProps> {\n  render() {\n    return (\n      <article ref={this.props.aRef} className={\"NewsItem-container\"}>\n        <a className=\"NewsItem-clickable\" href={this.props.url}>\n          <img\n            className=\"NewsItem-image\"\n            src={this.props.thumbnailStandard}\n            alt=\"\"\n          ></img>\n          <div className=\"NewsItem-text\">\n            <span className=\"NewsItem-publication-datetime\">\n              {this.props.publishedDate.toLocaleString(\"ru-RU\")}\n            </span>{\" \"}\n            - {this.props.title}\n          </div>\n        </a>\n      </article>\n    );\n  }\n}\n\nexport default NewsItem;\n","import React, { useEffect, useRef } from \"react\";\n\ntype AfterIntersectionCallback = () => void;\n\nconst useSingleIntersectionObserver = function (\n  options: IntersectionObserverInit = {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 1.0,\n  },\n  callback: AfterIntersectionCallback\n) {\n  const elementRef: React.MutableRefObject<Element | null | undefined> = useRef(\n    null\n  );\n\n  const intersectionObserverCallbackRef: React.MutableRefObject<IntersectionObserverCallback> = useRef(\n    ([entry], observer) => {\n      if (entry.isIntersecting && elementRef.current) {\n        observer.unobserve(elementRef.current);\n        elementRef.current = null;\n        callback();\n      }\n    }\n  );\n\n  const observerRef: React.MutableRefObject<IntersectionObserver> = useRef<IntersectionObserver>(\n    new IntersectionObserver(intersectionObserverCallbackRef.current, options)\n  );\n\n  const setObservedElement = useRef(\n    (newElement: Element | null | undefined) => {\n      if (elementRef.current) {\n        observerRef?.current?.unobserve(elementRef.current);\n      }\n\n      elementRef.current = newElement;\n\n      if (elementRef.current) {\n        observerRef?.current?.observe(elementRef.current);\n      }\n    }\n  );\n\n  // Disconnect observer on unmount\n  useEffect(() => {\n    const currentObserver = observerRef.current;\n    return () => {\n      currentObserver.disconnect();\n    };\n  }, []);\n\n  return [setObservedElement.current];\n};\n\nexport default useSingleIntersectionObserver;\n","import React from \"react\";\nimport \"./styles/LoadingSpinner.scss\";\ninterface LoadingSpinnerProps {}\n\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = () => {\n  return (\n    <div className=\"LoadingSpinner-container\">\n      <div className=\"LoadingSpinner-spinner\" />\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport NewsItem from \"./NewsItem\";\nimport useSingleIntersectionObserver from \"../hooks/useObserveSingleIntersection\";\nimport { LoadingSpinner } from \"./LoadingSpinner\";\nimport clsx from \"clsx\";\n\nimport \"./styles/NewsFeed.scss\";\n\ninterface NewsFeedProps {\n  apiEndpointUrl: string;\n  apiKey: string;\n  source: string;\n  section: string;\n  topMargin: \"large\" | \"small\";\n}\n\ninterface NewsItemRaw {\n  title: string;\n  url: string;\n  thumbnail_standard: string;\n  published_date: string;\n}\n\nconst batchSize = 20;\nconst maxBatchOffset = 500;\n\nexport const NewsFeed: React.FC<NewsFeedProps> = ({\n  apiEndpointUrl,\n  apiKey,\n  source,\n  section,\n  topMargin,\n}) => {\n  const [news, setNews] = useState<NewsItemRaw[]>([]);\n  const batchOffset = useRef<number>(0);\n\n  // The ref is used to prevent loading an extra batch of data,\n  // when the component is re-rendered after the LoadingSpinner gets unmounted\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoadingRef = useRef(false);\n\n  const [setObservedElementRef] = useSingleIntersectionObserver(\n    undefined,\n    () => {\n      loadBatch.current();\n    }\n  );\n\n  const loadBatch = useRef(() => {});\n\n  // Update the observed node on ref change\n  const onRefChange: (node?: Element | null) => void = useCallback(\n    (node?: Element | null) => {\n      setObservedElementRef(node);\n    },\n    [setObservedElementRef]\n  );\n\n  // Update the observed node after every render\n  // useEffect(() => {\n  //   refToLastNewsItem.current = document.querySelector(\".NewsItem-container:last-child\");\n  //   setObservedElementRef.current(refToLastNewsItem.current);\n  // }\n\n  // When either of these deps [apiEndpointUrl, apiKey, source, section] is changed:\n  // - clear the NewsFeed and reset the offset to 0\n  // - recreate loadBatch() function and store its ref\n  // - call loadBatch() function\n  // loadBatch function:\n  // - returns immideately, if isLoadingRef is already true or if batchOffset.current >= maxBatchOffset\n  // - sets isLoading state and isLoadingRef to true\n  // - fetches a batch of rawNewsItems\n  // - adds the fetched data to the existing news[]\n  // - in case of HTTP error, calls loadBatch again in 10 seconds\n  // - sets isLoading state and isLoadingRef back to false\n  useEffect(() => {\n    setNews([]);\n    batchOffset.current = 0;\n\n    loadBatch.current = () => {\n      if (isLoadingRef.current || batchOffset.current >= maxBatchOffset) return;\n      isLoadingRef.current = true;\n      setIsLoading(true);\n      axios\n        .get(\n          `${apiEndpointUrl}/${source}/${section}.json?limit=${batchSize}&offset=${batchOffset.current}&api-key=${apiKey}`\n        )\n        .then(({ data }) => {\n          if (data.results) {\n            setNews((rawNewsItems) => [...rawNewsItems, ...data.results]);\n            batchOffset.current += 20;\n          }\n        })\n        .catch((err) => {\n          if (axios.isAxiosError(err)) {\n            console.log(\n              \"The API server responed with an error, retrying in 10 sec.\"\n            );\n            setTimeout(loadBatch.current, 10000);\n          }\n          console.log(err);\n        })\n        .finally(() => {\n          setIsLoading(false);\n          isLoadingRef.current = false;\n        });\n    };\n\n    loadBatch.current();\n  }, [apiEndpointUrl, apiKey, source, section]);\n\n  return (\n    <section\n      className={clsx(\"NewsFeed\", topMargin === \"large\" && \"NewsFeed-shift\")}\n    >\n      {news.map(\n        (\n          item: {\n            title: string;\n            url: string;\n            thumbnail_standard: string;\n            published_date: string;\n          },\n          index\n        ) => (\n          <NewsItem\n            aRef={index === news.length - 1 ? onRefChange : undefined}\n            key={uuidv4()}\n            title={item.title}\n            url={item.url}\n            thumbnailStandard={item.thumbnail_standard}\n            publishedDate={new Date(item.published_date)}\n          />\n        )\n      )}\n\n      {isLoading && <LoadingSpinner />}\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./styles/NewsSectionPicker.scss\";\n\ninterface Section {\n  section: string;\n  display_name: string;\n}\n\ninterface NewsSecionPickerProps {\n  mode: \"small\" | \"large\";\n  sections: Section[];\n  setSelectedSection: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const NewsSecionPicker: React.FC<NewsSecionPickerProps> = ({\n  mode,\n  sections,\n  setSelectedSection,\n}) => {\n  const handleChangeSelectedSecton = (\n    evt: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    setSelectedSection(evt.target.value);\n  };\n\n  return (\n    <nav className=\"NewsSectionPicker-container\">\n      {mode === \"large\" && (\n        <ul className=\"NewsSectionPicker-large\">\n          {sections.map((s) => (\n            <li\n              className=\"NewsSectionPicker-section\"\n              key={s.section}\n              onClick={() => {\n                setSelectedSection(s.section);\n              }}\n            >\n              {s.display_name}\n            </li>\n          ))}\n        </ul>\n      )}\n      {mode === \"large\" && (\n        <div className=\"NewsSectionPicker-small\">\n          <div className=\"select\">\n            <select onChange={handleChangeSelectedSecton}>\n              {sections.map((s) => (\n                <option\n                  className=\"NewsSectionPicker-section\"\n                  key={s.section}\n                  value={s.section}\n                >\n                  {s.display_name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { NewsFeed } from \"./components/NewsFeed\";\n\nimport \"./App.scss\";\nimport { NewsSecionPicker } from \"./components/NewsSecionPicker\";\nimport { useVerticalScrollListener } from \"./hooks/useVerticalScrollListener\";\nimport axios from \"axios\";\nimport ScrollToTop from \"react-scroll-up\";\n\nconst API_ENDPOINT_URL = process.env.REACT_APP_NYT_API_ENDPOINT_URL || \"\";\nconst API_KEY = process.env.REACT_APP_NYT_API_KEY || \"\";\nconst SOURCE = \"nyt\";\n\nfunction App() {\n  const [newsSectionPickerMode, setNewsSectionPickerMode] = useState<\n    \"small\" | \"large\"\n  >(\"large\");\n  useVerticalScrollListener(\n    document,\n    100,\n    (n) => setNewsSectionPickerMode(\"small\" as const),\n    (n) => setNewsSectionPickerMode(\"large\" as const)\n  );\n\n  const [sections, setSections] = useState<\n    { section: string; display_name: string }[]\n  >([]);\n  const [selectedSection, setSelectedSection] = useState(\"all\");\n\n  useEffect(() => {\n    axios\n      .get(`${API_ENDPOINT_URL}/section-list.json?api-key=${API_KEY}`)\n      .then(({ data }) => {\n        let results: { section: string; display_name: string }[] = data.results;\n        results = results.map((s) => {\n          return {\n            section: encodeURIComponent(s.section),\n            display_name: s.display_name,\n          };\n        });\n        setSections([\n          { section: \"all\", display_name: \"All\" },\n          ...Array.from(results).filter((s) => s.section !== \"admin\"),\n        ]);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Nytsletter</h1>\n        <NewsSecionPicker\n          mode={newsSectionPickerMode}\n          sections={sections}\n          setSelectedSection={setSelectedSection}\n        ></NewsSecionPicker>\n      </header>\n      <main className=\"App-main\">\n        <NewsFeed\n          apiEndpointUrl={API_ENDPOINT_URL}\n          apiKey={API_KEY}\n          source={SOURCE}\n          section={selectedSection}\n          topMargin={newsSectionPickerMode}\n        ></NewsFeed>\n      </main>\n      <footer className=\"App-footer\">\n        <ScrollToTop showUnder={160}>\n          <img\n            className=\"App-scroll-up-icon\"\n            src={process.env.PUBLIC_URL + \"/img/scroll-up-icon.png\"}\n            alt=\"Scroll up\"\n          ></img>\n        </ScrollToTop>\n        <img\n          src={process.env.PUBLIC_URL + \"/img/poweredby_nytimes_150a.png\"}\n          alt=\"Data provided by The New York Times\"\n        ></img>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nexport const useVerticalScrollListener = (\n  root: Document | Element = document,\n  threshold: number,\n  crossedDownCallback: (position: number) => void,\n  crossedUpCallback: (position: number) => void\n) => {\n  const lastKnownScrollPosition = useRef(0);\n  const ticking = useRef(false);\n  useEffect(() => {\n    const listener: EventListenerOrEventListenerObject = function (e) {\n      let crossedDown = false;\n      let crossedUp = false;\n      if (\n        lastKnownScrollPosition.current < threshold &&\n        window.scrollY >= threshold\n      )\n        crossedDown = true;\n      if (\n        lastKnownScrollPosition.current > threshold &&\n        window.scrollY <= threshold\n      )\n        crossedUp = true;\n\n      lastKnownScrollPosition.current = window.scrollY;\n\n      if (!ticking.current) {\n        window.requestAnimationFrame(function () {\n          if (crossedDown) crossedDownCallback(lastKnownScrollPosition.current);\n          if (crossedUp) crossedUpCallback(lastKnownScrollPosition.current);\n          ticking.current = false;\n        });\n\n        ticking.current = true;\n      }\n    };\n    root.addEventListener(\"scroll\", listener);\n    return () => {\n      root.removeEventListener(\"scroll\", listener);\n    };\n  });\n  return [lastKnownScrollPosition];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}